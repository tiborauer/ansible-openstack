- name: Required packages
  ansible.builtin.apt:
    name:
      - open-iscsi
      - nfs-common
      - jq
      - cryptsetup
    state: latest

- name: Open-iSCSI service
  ansible.builtin.systemd_service:
    name: open-iscsi.service
    state: started
    enabled: true

- name: Open-iSCSI kernel module
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop:
      - iscsi_tcp
      - dm_crypt

- name: Check environment for Longhorn
  when: inventory_hostname == groups[cluster_name + '_control'][0]
  become: false
  block:
    - name: Get script for Longhorn sanity check
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/longhorn/longhorn/refs/tags/v{{ longhorn.version }}/scripts/environment_check.sh" # version MUST correspond to that in the iondri-k3s-argocd repo
        dest: "{{ temporary_intallation_directory }}/longhorn_environment_check.sh"
        mode: 0774

    - name: Longhorn sanity check
      ansible.builtin.command: "{{ temporary_intallation_directory }}/longhorn_environment_check.sh"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: res_env_check

    - name: Check Longhorn sanity check output - warning
      debug:
        msg: "{{ item }}"
      when: item.find('WARN') != -1
      loop: "{{ res_env_check.stdout_lines }}"

    - name: Check Longhorn sanity check output - error
      debug:
        msg: "{{ item }}"
      when: item.find('ERROR') != -1
      failed_when: item.find('ERROR') != -1
      register: res_env_error
      loop: "{{ res_env_check.stdout_lines }}"

- name: Deploy Longhorn
  when: inventory_hostname == groups[cluster_name + '_control'][0]
  become: false
  block:
    - name: Add Longhorn repo
      kubernetes.core.helm_repository:
        name: longhorn
        repo_url: "https://charts.longhorn.io"

    - name: Install Longhorn # MUST match https://github.com
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        name: longhorn
        chart_ref: longhorn/longhorn
        chart_version: "{{ longhorn.version }}"
        release_namespace: longhorn-system
        create_namespace: true
        values:
          preUpgradeChecker:
            jobEnabled: false
          persistence:
            defaultClassReplicaCount: "{{ longhorn.default_class_replicacount }}"
          longhornUI:
            replicas: 1
        wait: true

- name: Configure encryption
  when: inventory_hostname == groups[cluster_name + '_control'][0]
  become: false
  block:
    - ansible.builtin.include_role:
        name: k3s
        tasks_from: create_sealedsecret.yml
      vars:
        secret_namespace: longhorn-system
        secret_name: onghorn-crypto
        secret_data:
          CRYPTO_KEY_VALUE: "{{ longhorn.crypto_key }}"
          CRYPTO_KEY_PROVIDER: "secret"

    - name: Default encrypted storageclass
      block:
        - name: Retrieve default storageclass config
          ansible.builtin.k8s_info:
            kubeconfig: "{{ kubeconfig }}"
            namespace: longhorn-system
            kind: configmap
            name: longhorn-storageclass
          register: res_sc

        - name: Un-default unencrypted storageclass
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig }}"
            definition:
              apiVersion: storage.k8s.io/v1
              kind: StorageClass
              metadata:
                name: longhorn
                annotations:
                  storageclass.kubernetes.io/is-default-class: "false"

        - name: Default encrypted storageclass
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig }}"
            definition:
              apiVersion: storage.k8s.io/v1
              kind: StorageClass
              metadata:
                name: longhorn-encrypted
                annotations:
                  storageclass.kubernetes.io/is-default-class: "true"
              provisioner: driver.longhorn.io
              allowVolumeExpansion: true
              parameters:
                numberOfReplicas: "{{ dict(res_sc.resources[0].data['storageclass.yaml'] | from_yaml).parameters.numberOfReplicas }}"
                staleReplicaTimeout: "2880" # 48 hours in minutes
                fromBackup: ""
                encrypted: "true"
                # global secret that contains the encryption key that will be used for all volumes
                csi.storage.k8s.io/provisioner-secret-name: "longhorn-crypto"
                csi.storage.k8s.io/provisioner-secret-namespace: "longhorn-system"
                csi.storage.k8s.io/node-publish-secret-name: "longhorn-crypto"
                csi.storage.k8s.io/node-publish-secret-namespace: "longhorn-system"
                csi.storage.k8s.io/node-stage-secret-name: "longhorn-crypto"
                csi.storage.k8s.io/node-stage-secret-namespace: "longhorn-system"