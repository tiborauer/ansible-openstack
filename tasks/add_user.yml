- name: User config
  ansible.builtin.set_fact:
    user: "{{ service_account if username == service_account.username else (users | selectattr('username', 'match', username) | first) }}"

- name: "Add the user '{{ user.username }}'"
  ansible.builtin.user:
    name: "{{ user.username }}"
    comment: "{{ user.name }}"
    uid: "{{ user.uid }}"
    groups: "{{ ['users'] + (['sudo'] if (user.username == service_account.username) or (user.sudoer | default(false)) else []) + (['docker'] if (user.username != service_account.username) else []) }}"
    password: "{{ '*' if user.username == service_account.username else (user.password | password_hash('sha512')) }}"
    password_lock: "{{ user.username == service_account.username }}"
    shell: /bin/bash

- name: Set the service user as passwordless sudo
  when: user.username == service_account.username
  community.general.sudoers:
    name: "{{ service_account.username }}"
    user: "{{ service_account.username }}"
    commands: ALL
    nopassword: true

- name: SSH
  block:
    - name: SSH dir
      ansible.builtin.file:
        path: "/home/{{ user.username }}/.ssh"
        state: directory
        owner: "{{ user.username }}"
        group: "{{ user.username }}"
        mode: 0750 

    - name: SSH private key    
      ansible.builtin.copy:
        content: "{{ user.ssh_private_key }}"
        dest: "/home/{{ user.username }}/.ssh/id_rsa"
        owner: "{{ user.username }}"
        group: "{{ user.username }}"
        mode: 0600    

    - name: SSH public key
      ansible.builtin.copy:
        content: "{{ user.ssh_public_key }}"
        dest: "/home/{{ user.username }}/.ssh/id_rsa.pub"
        owner: "{{ user.username }}"
        group: "{{ user.username }}"
        mode: 0600    

    - name: Authorise SSH public key
      ansible.builtin.copy:
        content: "{{ user.ssh_public_key }}"
        dest: "/home/{{ user.username }}/.ssh/authorized_keys"
        owner: "{{ user.username }}"
        group: "{{ user.username }}"
        mode: 0600

- name: VNC
  when: (user.username != service_account.username) and (user.desktop is defined)
  block:
    - name: Set TigerVNC service environment
      ansible.builtin.template:
        src: templates/vncserver_env.j2
        dest: "/etc/systemd/system/vncserver_{{ user.username }}.env"
      vars:
        display_id: "{{ user.desktop }}"

    - name: TigerVNC service
      ansible.builtin.service:
        enabled: true
        name: "vncserver@{{ user.username }}.service"
        state: started
